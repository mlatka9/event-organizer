// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                    @id @default(cuid())
  email               String                    @unique
  name                String
  hashPassword        String
  eventParticipants   EventParticipant[]
  image               String?
  groups              UsersInGroup[]
  favouriteCategories UserFavouriteCategories[]
  joinedAt            DateTime                  @default(now())
}

model UserFavouriteCategories {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([userId, categoryId])
}

model Event {
  id                    String                @id @default(cuid())
  name                  String
  description           String
  street                String?
  city                  String?
  normalizedCity        NormalizedCity?       @relation(fields: [normalizedCityId], references: [id])
  normalizedCityId      String?
  country               String?
  postCode              String?
  startDate             DateTime?
  latitude              Decimal?
  longitude             Decimal?
  bannerImage           String?
  tags                  EventTag[]
  eventParticipants     EventParticipant[]
  eventVisibilityStatus EventVisibilityStatus
  eventLocationStatus   EventLocationStatus
  categoryId            String
  category              Category              @relation(fields: [categoryId], references: [id])
}

model Group {
  id          String         @id @default(cuid())
  name        String
  description String
  memebrs     UsersInGroup[]
  categoryId  String
  category    Category       @relation(fields: [categoryId], references: [id])
}

model UsersInGroup {
  group    Group     @relation(fields: [groupId], references: [id])
  groupId  String
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  role     GroupRole @default(USER)
  joinedAt DateTime  @default(now())

  @@id([groupId, userId])
}

model EventParticipant {
  role    EventRole @default(USER)
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  event   Event     @relation(fields: [eventId], references: [id])
  eventId String

  @@id([userId, eventId])
}

model NormalizedCity {
  id     String  @id @default(cuid())
  name   String  @unique
  events Event[]
}

enum EventRole {
  USER
  ADMIN
}

enum GroupRole {
  USER
  ADMIN
}

enum EventVisibilityStatus {
  PRIVATE
  PUBLIC
}

enum EventLocationStatus {
  STATIONARY
  ONLINE
}

model Category {
  id                String                    @id @default(cuid())
  name              String
  events            Event[]
  favouritedByUsers UserFavouriteCategories[]
  group             Group[]
}

model EventTag {
  id     String  @id @default(cuid())
  name   String  @unique
  events Event[]
}
