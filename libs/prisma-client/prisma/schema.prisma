// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                        @id @default(cuid())
  email                       String                        @unique
  name                        String                        @unique
  hashPassword                String
  eventParticipants           EventParticipant[]
  image                       String?
  groups                      UsersInGroup[]
  favouriteCategories         UserFavouriteCategories[]
  joinedAt                    DateTime                      @default(now())
  pendingEventInvitations     EventInvitation[]
  pendingGroupInvitations     GroupInvitation[]
  eventsSharedInGroups        EventSharedInGroup[]
  GroupMessages               GroupMessage[]
  usersSelectedDatePollOption UsersSelectedDatePollOption[]
}

model UserFavouriteCategories {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([userId, categoryId])
}

model Event {
  id                            String                @id @default(cuid())
  name                          String
  description                   String
  street                        String?
  city                          String?
  normalizedCity                NormalizedCity?       @relation(fields: [normalizedCityId], references: [id])
  normalizedCityId              String?
  country                       String?
  postCode                      String?
  startDate                     DateTime?
  endDate                       DateTime?
  latitude                      Decimal?
  longitude                     Decimal?
  bannerImage                   String?
  tags                          EventTag[]
  eventParticipants             EventParticipant[]
  eventVisibilityStatus         EventVisibilityStatus
  eventLocationStatus           EventLocationStatus
  categoryId                    String
  category                      Category              @relation(fields: [categoryId], references: [id])
  pendingParticipantInvitations EventInvitation[]
  sharedInGroups                EventSharedInGroup[]
  eventDatePoll                 EventDatePoll?
}

model Group {
  id                       String               @id @default(cuid())
  name                     String               @unique
  description              String
  members                  UsersInGroup[]
  eventsShared             EventSharedInGroup[]
  bannerImage              String?
  categoryId               String
  category                 Category             @relation(fields: [categoryId], references: [id])
  visibility               GroupVisibility
  pendingMemberInvitations GroupInvitation[]
  GroupMessages            GroupMessage[]
}

model EventSharedInGroup {
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@id([groupId, eventId, userId])
}

model UsersInGroup {
  group    Group     @relation(fields: [groupId], references: [id])
  groupId  String
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  role     GroupRole @default(USER)
  joinedAt DateTime  @default(now())

  @@id([groupId, userId])
}

model EventParticipant {
  role    EventRole @default(USER)
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  event   Event     @relation(fields: [eventId], references: [id])
  eventId String

  @@id([userId, eventId])
}

model NormalizedCity {
  id     String  @id @default(cuid())
  name   String  @unique
  events Event[]
}

model Category {
  id                String                    @id @default(cuid())
  name              String
  events            Event[]
  favouritedByUsers UserFavouriteCategories[]
  group             Group[]
}

model GroupMessage {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id])
}

model EventInvitation {
  createdAt       DateTime @default(now())
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  event           Event    @relation(fields: [eventId], references: [id])
  eventId         String
  isUserAccepted  Boolean
  isAdminAccepted Boolean

  @@unique([userId, eventId])
}

model GroupInvitation {
  createdAt       DateTime @default(now())
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  group           Group    @relation(fields: [groupId], references: [id])
  groupId         String
  isUserAccepted  Boolean
  isAdminAccepted Boolean

  @@unique([userId, groupId])
}

model EventTag {
  id     String  @id @default(cuid())
  name   String  @unique
  events Event[]
}

model EventDatePoll {
  id        String  @id @default(cuid())
  isEnabled Boolean @default(false)
  event     Event   @relation(fields: [eventId], references: [id])
  eventId   String @unique
  eventDatePollOptions EventDatePollOption[]
}

model EventDatePollOption {
  id                          String                        @id @default(cuid())
  startDate                   DateTime
  endDate                     DateTime?
  usersSelectedDatePollOption UsersSelectedDatePollOption[]
  eventDatePoll   EventDatePoll @relation(fields: [eventDatePollId], references: [id])
  eventDatePollId String
}

model UsersSelectedDatePollOption {
  participant           User                @relation(fields: [participantId], references: [id])
  participantId         String
  eventDatePollOption   EventDatePollOption @relation(fields: [eventDatePollOptionId], references: [id])
  eventDatePollOptionId String

  @@unique([participantId, eventDatePollOptionId])
}

enum EventRole {
  USER
  ADMIN
}

enum GroupRole {
  USER
  ADMIN
}

enum GroupVisibility {
  PRIVATE
  PUBLIC
}

enum EventVisibilityStatus {
  PRIVATE
  PUBLIC
}

enum EventLocationStatus {
  STATIONARY
  ONLINE
}
